/**
 * Amitha_Murali, 001643826, murali.a@husky.neu.edu
 * Jyoti Sharma, 001643410, sharma.j@husky.neu.edu
 * Surabhi Patil, 001251860, patil.sur@husky.neu.edu
 **/

package com.csye6225.demo.controllers;

import com.csye6225.demo.dao.FileAttachmentRepository;
import com.csye6225.demo.entities.FileAttachment;
import com.csye6225.demo.helpers.Helper;
import com.google.gson.JsonObject;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.util.ArrayList;

@Controller    // This means that this class is a Controller

public class FileAttachmentController {

    @Autowired
    private Helper helper;

    @Autowired
    // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
    private FileAttachmentRepository fileAttachmentRepository;

    @RequestMapping(value="/tasks/{id}/attachments",method= RequestMethod.GET,produces="application/json")
    public @ResponseBody String getAttachedFilesForTask (HttpServletRequest request){

        JsonObject jsonObject = new JsonObject();

        //Write add file code here

        String header = request.getHeader("Authorization");
        int taskId = Integer.parseInt(request.getRequestURI().split("/")[2]);
        if(header != null) {

            int userID = helper.GetUserDetails(header);

            if(userID > -1) {

                if(taskId > 0) {

                    ArrayList<String> fileList = helper.getFileList( taskId ) ;

                    if (fileList == null) {
                        jsonObject.addProperty("message", "No file exists.");
                        return jsonObject.toString();
                    } else {
                        jsonObject.addProperty("message", "Here is the list of files attached to the task " + fileList.toString());
                        return jsonObject.toString();
                    }
                }
                jsonObject.addProperty("message", "Invalid Task Id.");
                return jsonObject.toString();
            }
        }

        jsonObject.addProperty("message", "Error Occurred.");
        return jsonObject.toString();

    }

    @RequestMapping(value="/tasks/{id}/attachments",method= RequestMethod.POST,produces="application/json")
    public @ResponseBody String attachFileToTask (HttpServletRequest request, @RequestParam ("file")MultipartFile theFile){

        System.out.println("I am here");

        JsonObject jsonObject = new JsonObject();

        //Write add file code here

        // location to store file uploaded
        final String UPLOAD_DIRECTORY = "/home/jyoti/Downloads/assgn5/uploads";

        // upload settings
        final int MEMORY_THRESHOLD   = 1024 * 1024 * 3;  // 3MB
        final int MAX_FILE_SIZE      = 1024 * 1024 * 40; // 40MB
        final int MAX_REQUEST_SIZE   = 1024 * 1024 * 50; // 50MB

        String filePath = "";
        // configures upload settings
        DiskFileItemFactory factory = new DiskFileItemFactory();
        // sets memory threshold - beyond which files are stored in disk
        factory.setSizeThreshold(MEMORY_THRESHOLD);
        // sets temporary location to store files
        factory.setRepository(new File(System.getProperty("java.io.tmpdir")));

        ServletFileUpload upload = new ServletFileUpload(factory);

        // sets maximum size of upload file
        upload.setFileSizeMax(MAX_FILE_SIZE);

        // sets maximum size of request (include file + form data)
        upload.setSizeMax(MAX_REQUEST_SIZE);

        // constructs the directory path to store upload file
        // this path is relative to application's directory
        //String uploadPath = getServletContext().getRealPath("")+ File.separator + UPLOAD_DIRECTORY;

        // creates the directory if it does not exist
        File uploadDir = new File("/home/jyoti/Downloads/assgn5/uploads");
        if (!uploadDir.exists()) {
            uploadDir.mkdir();
        }

        try {
            // parses the request's content to extract file data
            //@SuppressWarnings("unchecked")
            //List<FileItem> formItems = upload.parseRequest(request);

            ///if (formItems != null && formItems.size() > 0) {
                // iterates over form's fields
                ///for (FileItem item : formItems) {
                    // processes only fields that are not form fields
                    ///if (!item.isFormField()) {
                        //String fileName = new File(item.getName()).getName();
                        filePath = "/home/jyoti/Downloads/assgn5/uploads" + File.separator + theFile.getOriginalFilename();
                        File storeFile = new File(filePath);

                     theFile.transferTo( storeFile );
                        // saves the file on disk
                        //item.write(storeFile);

                        request.setAttribute("message",
                                "Upload has been done successfully!");
                   // }
               // }
           // }
       } catch (Exception ex) {
            request.setAttribute("message",
                    "There was an error: " + ex.getMessage());
        }




        //String filePath = request.getParameter("attachment");
        String header = request.getHeader("Authorization");
        int taskId = Integer.parseInt(request.getRequestURI().split("/")[2]);
        if(header != null) {

            int userID = helper.GetUserDetails(header);

            if(userID > -1) {

                if(taskId > 0) {

                    System.out.println("My path" + filePath);

                    FileAttachment file = new FileAttachment();
                    file.setPath( filePath );
                    file.setTaskId( taskId );
                    file.setUserId( userID );
                    fileAttachmentRepository.save( file );

                    jsonObject.addProperty( "message", "File has been uploaded successfully for the User task." );
                    jsonObject.addProperty( "userId", file.getUserId() );
                    jsonObject.addProperty( "taskId", file.getId().toString() );
                    jsonObject.addProperty( "filePath", file.getPath() );
                    return jsonObject.toString();
                }
                jsonObject.addProperty("message", "Invalid Task Id.");
                return jsonObject.toString();
            }
        }


        jsonObject.addProperty("message", "Error Occurred.");
        return jsonObject.toString();

    }

    @RequestMapping(value="/tasks/{id}/attachments/{idAttachments}",method= RequestMethod.DELETE,produces="application/json")
    public @ResponseBody String deleteFile (HttpServletRequest request) {

        JsonObject jsonObject = new JsonObject();

        //Write delete file code here

        String header = request.getHeader("Authorization");
        int taskId = Integer.parseInt(request.getRequestURI().split("/")[2]);
        Long fileAttachmentId = Long.parseLong( request.getRequestURI().split( "/" )[4] );
        if(header != null) {

            int userID = helper.GetUserDetails(header);

            if(userID > -1) {

                if(taskId > 0) {
                    if(fileAttachmentId > 0) {

                       FileAttachment file = fileAttachmentRepository.findOne(fileAttachmentId ) ;
                       if(file != null){
                           if(file.getTaskId() == taskId){
                               if(file.getUserId() == userID){
                                   fileAttachmentRepository.delete( file );
                                   jsonObject.addProperty( "message", "File has been deleted successfully for the User task." );
                                   return jsonObject.toString();
                               }
                           }
                       }

                    }
                    jsonObject.addProperty("message", "Invalid file Id.");
                    return jsonObject.toString();
                }
                jsonObject.addProperty("message", "Invalid Task Id.");
                return jsonObject.toString();
            }
        }
        jsonObject.addProperty("message", "Error Occurred.");
        return jsonObject.toString();

    }

}
